<?php

namespace common\models;

use common\behaviors\ImgUploadBehavior;
use Yii;

/**
 * This is the model class for table "month".
 *
 * @property int $id
 * @property int $tour_id
 * @property int $title
 * @property string $image
 * @property int $publish
 * @property int $deleted
 * @property int $maxCount
 *
 * @property Booking[] $bookings
 * @property Tour $tour
 * @property Stage[] $stages
 */
class Month extends \yii\db\ActiveRecord
{
    public $maxCount;

    public function afterFind()
    {
        $this->maxCount = $this->tour->max_count;
        parent::afterFind();
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'month';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['tour_id'], 'required'],
            [['tour_id',  'publish', 'deleted'], 'integer'],
            [['image'], 'string', 'max' => 255],
            [['title'], 'safe'],
            [['tour_id'], 'exist', 'skipOnError' => true, 'targetClass' => Tour::className(), 'targetAttribute' => ['tour_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'tour_id' => 'Тур',
            'title' => 'Название',
            'image' => 'Изображение',
            'publish' => 'Побликация',
            'deleted' => 'Удален',
        ];
    }

    public function behaviors()
    {
        return [
            'ImgUploadBehavior' => [
                'class' => ImgUploadBehavior::className(),
                'noImage' => 'no_image.png',
                'folder' => '/uploads/images/month',
                'propImage' => 'image',
            ],
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBookings()
    {
        return $this->hasMany(Booking::className(), ['month_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTour()
    {
        return $this->hasOne(Tour::className(), ['id' => 'tour_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getStages()
    {
        return $this->hasMany(Stage::className(), ['month_id' => 'id']);
    }

    public function beforeSave($insert)
    {
        if ($this->title){

            $this->title =
                is_string($this->title)
                    ? strtotime('01.'.$this->title)
                    : $this->title;
        }else{
            $this->title = time();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

}
